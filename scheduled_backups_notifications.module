<?php
/**
 * @TODO
 * 1) loop over each distinct schedule
 * 2) use schedule frequency to determine alert period
 * 3) use unique generated code for menu path as per poormanscron
 * 4) throttle to prevent users hitting url and spamming recipient with alert emails
 *
 */

define('SBN_ONE_MINUTE', 60);
define('SBN_ONE_DAY', 24*60*60);
define('SBN_EMAIL_RECIPIENT', 'person@mail.com');
define('SBN_PERIOD_FACTOR', 1.1);

/**
 * Implements hook_menu().
 *
 * @return array
 */
function scheduled_backups_notifications_menu(){

    $items = array();

    $items['admin/config/system/scheduled-backups-notifications'] = array(
        'page callback' => '_scheduled_backups_notifications_check',
        // Ensure correct format for rendered content
        //'delivery callback' => 'ajax_deliver',
        'access callback' => TRUE,
        // Ensure correct theme is used for custom ajax path
        //'theme callback' => 'ajax_base_page_theme',
        'type' => MENU_CALLBACK
    );

    return $items;
}

/*
 * Implements hook_cron().
 */
function scheduled_backups_notifications_cron(){

    _scheduled_backups_notifications_check();
}


/**
 * Implements hook_mail().
 *
 * @param $key
 * @param $message
 * @param $params
 */
function scheduled_backups_notifications_mail($key, &$message, $params){

    // Each message is associated with a language, which may or may not be the
    // current user's selected language, depending on the type of e-mail being
    // sent. This $options array is used later in the t() calls for subject
    // and body to ensure the proper translation takes effect.
    $options = array(
        'langcode' => $message['language']->language,
    );

    $site_name = variable_get('site_name', 'Drupal');

    switch ($key) {
        // Send a simple message from the contact form.
        case 'alert':
            $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => $site_name), $options);
            // Note that the message body is an array, not a string.
            $message['body'][] = t('Scheduled backup alert on @site-name: ', array('@site-name' => $site_name), $options) . check_plain($params['message']);
            // Because this is just user-entered text, we do not need to translate it.
            // Since user-entered text may have unintentional HTML entities in it like
            // '<' or '>', we need to make sure these entities are properly escaped,
            // as the body will later be transformed from HTML to text, meaning
            // that a normal use of '<' will result in truncation of the message.
            //$message['body'][] = check_plain($params['message']);
            break;
    }
}

/**
 * Check scheduled backups and notify by email if latest is older than x
 */
function _scheduled_backups_notifications_check(){

    global $language;

    $schedules = backup_migrate_get_schedules();
    if (!$schedules) {
        // nothing to do here
        return;
    }

    $backups_info = backup_migrate_get_saved_backups();
    if (!$backups_info) {
        $message = t('There are no backup files');
        drupal_mail('scheduled_backups_notifications', 'alert', SBN_EMAIL_RECIPIENT, $language, array('message' => $message));
        return;
    }
    $backups = array_shift($backups_info);

    foreach ($schedules as $schedule_id => $schedule) {
        // closure - allows us to pass $schedule_id argument to array_filter function
        $scheduled_backups = array_filter($backups, function($backup) use($schedule_id){
            return (isset($backup->file_info['schedule_id']) && $backup->file_info['schedule_id'] == $schedule_id);
        });

        if (!$scheduled_backups) {
            $message = t('There are no scheduled backup files for schedule: @schedule_id', array('@schedule_id' => $schedule_id));
            drupal_mail('scheduled_backups_notifications', 'alert', SBN_EMAIL_RECIPIENT, $language, array('message' => $message));
            return;
        }

        $latest_scheduled_backup = array_shift($scheduled_backups);
        $latest_scheduled_backup_timestamp = $latest_scheduled_backup->file_info['filetime'];

        $schedule_period = $schedule->period;

        // account for fact that cron running this check will also generate backups,
        // so depending on cron schedule and backup schedule period
        // latest backup could have correctly been made at $schedule_period time ago
        // this is possibly not required
        $alert_period = ($schedule_period * SBN_PERIOD_FACTOR);

        if (_scheduled_backups_notifications_is_timestamp_older_than($latest_scheduled_backup_timestamp, $alert_period)) {
            drupal_mail('scheduled_backups_notifications', 'alert', SBN_EMAIL_RECIPIENT, $language, array());
        }
    }
}


/**
 * Determine whether specified backup is scheduled (rather than manual)
 *
 * @param $backup
 * @return bool
 */
function _scheduled_backups_notifications_is_scheduled_backup($backup){
    return isset($backup->file_info['schedule_id']);
}

/**
 * Determine if specified timestamp is older than the specified period
 *
 * @param $timestamp
 * @param $period
 * @return bool
 */
function _scheduled_backups_notifications_is_timestamp_older_than($timestamp, $period){
    return (time() - $timestamp >= $period);
}